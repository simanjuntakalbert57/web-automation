pipeline {
    agent any  // Menjalankan pipeline pada agen manapun yang tersedia

    environment {
        // Definisikan variabel lingkungan jika diperlukan
        // Misalnya untuk kredensial, server, dll.
        DEPLOY_SERVER = 'your.deploy.server'
        BRANCH_NAME = 'master'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout kode dari repositori
                git branch: "${env.BRANCH_NAME}", url: 'https://github.com/simanjuntakalbert57/web-automation.git'
            }
        }

        stage('Test') {
            steps {
                script {
                    // Simulasi pengujian unit atau pengujian lainnya
                    echo 'Running unit tests...'
                    
                    // Contoh menjalankan unit test dengan command (misalnya menggunakan Maven atau npm)
                    sh 'echo "Simulating tests... all tests passed!"'
                    
                    // Jika menggunakan Maven, contoh:
                    sh 'mvn test -PTestng -Dbrowser=chrome'
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Simulasi proses build
                    echo 'Building the project...'
                    
                    // Contoh build, misalnya menggunakan Maven, Gradle, atau npm
                    sh 'echo "Simulating build... build completed!"'
                    
                    // Contoh dengan Maven:
                    // sh 'mvn clean package'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Simulasi proses deployment ke server
                    echo "Deploying to ${env.DEPLOY_SERVER}..."
                    
                    // Misalnya menggunakan SSH atau SCP untuk mengirim file ke server
                    sh 'echo "Simulating deploy... deployment success!"'
                    
                    // Contoh perintah deploy:
                    // sh 'scp target/your-artifact.jar user@${env.DEPLOY_SERVER}:/path/to/deploy/'

                    // Jika menggunakan Ansible atau Docker:
                    // sh 'ansible-playbook deploy.yml'
                }
            }
        }

        stage('Cleanup') {
            steps {
                echo 'Cleaning up the environment...'
                // Membersihkan file sementara atau proses lain yang tidak dibutuhkan
            }
        }
    }

    post {
        success {
            echo 'Pipeline berhasil! Proyek telah dibangun, diuji, dan dideploy.'
        }
        failure {
            echo 'Pipeline gagal. Periksa log untuk detail kesalahan.'
        }
        always {
            echo 'Pipeline selesai menjalankan semua tahap.'
        }
    }
}
